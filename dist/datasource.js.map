{"version":3,"sources":["../src/datasource.js"],"names":["_","$","moment","dateMath","SolrDatasource","instanceSettings","$q","backendSrv","templateSrv","url","endsWith","substr","length","basicAuth","withCredentials","name","solrCollection","jsonData","solrCloudMode","_request","options","method","inspect","headers","datasourceRequest","doRequest","then","response","status","message","title","queryOptions","self","targetPromises","targets","filter","target","hide","map","collection","time","groupEnabled","groupByField","rows","q","replace","scopedVars","queryBuilder","rawParams","split","query","fq","range","from","toJSON","to","fl","fields","sort","start","tuple","p","val","group","groupLimit","requestOptions","params","bind","convertResponse","outputFormat","value","all","convertedResponses","result","data","convertedResponse","flatten","mapToTextValue","text","facetFields","collections","facet_counts","ar","key","facet_fields","hasOwnProperty","array","i","push","expandable","field","format","seriesList","series","facets","heatMapFacet","jobs","buckets","forEach","dayBuckets","job","Day0","seriesData","bucket","score","utc","valueOf","datapoints","columns","index","docs","item","row","property","type","ts","reverse","groupBy","responseHeader","grouped","groups","doclist","t","unix","groupValue","undefined","prop","convertResponseUngrouped","convertResponseGrouped","annotation","baseQuery","timeField","tagsField","titleField","textField","toISOString","end","limit","doc","tags"],"mappings":"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","file":"datasource.js","sourcesContent":["// Copyright 2018 PUE.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport _ from 'lodash';\nimport * as $ from 'jquery';\nimport moment from 'moment';\nimport * as dateMath from 'app/core/utils/datemath';\n\n/** @ngInject */\nexport class SolrDatasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.url = instanceSettings.url;\n    if (this.url.endsWith('/')) {\n      this.url = this.url.substr(0, this.url.length - 1);\n    }\n    this.basicAuth = instanceSettings.basicAuth;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.name = instanceSettings.name;\n    //this.collection = instanceSettings.jsonData.collection;\n    this.$q = $q;\n    this.templateSrv = templateSrv;\n    this.backendSrv = backendSrv;\n    this.solrCollection = instanceSettings.jsonData.solrCollection;\n    this.solrCloudMode = instanceSettings.jsonData.solrCloudMode;\n\n    // Helper to make API requests to Solr. To avoid CORS issues, the requests may be proxied\n    // through Grafana's backend via `backendSrv.datasourceRequest`.\n    this._request = function (options) {\n      options.url = this.url + options.url;\n      options.method = options.method || 'GET';\n      options.inspect = {\n        'type': 'solr'\n      };\n\n      if (this.basicAuth) {\n        options.withCredentials = true;\n        options.headers = {\n          \"Authorization\": this.basicAuth\n        };\n      }\n\n      return backendSrv.datasourceRequest(options);\n    };\n  }\n\n  // Test the connection to Solr by querying collection response.\n  testDatasource() {\n    return this.doRequest({\n      url: this.url + '/',\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return {\n          status: \"success\",\n          message: \"Data source is working\",\n          title: \"Success\"\n        };\n      } else {\n        return {\n          status: \"error\",\n          message: \"Data source is NOT working\",\n          title: \"Error\"\n        };\n      }\n    });\n  }\n\n  // Query for metric targets within the specified time range.\n  // Returns the promise of a result dictionary.\n  query(queryOptions) {\n    //console.log('QUERY: ' + JSON.stringify(queryOptions));\n    var self = this;\n\n    var targetPromises = _(queryOptions.targets)\n      .filter(function (target) {\n        return target.target && !target.hide;\n      })\n      .map(function (target) {\n        if (!target.collection || !target.time) {\n          return [];\n        }\n        if (target.groupEnabled === 'group' && !target.groupByField) {\n          return [];\n        }\n        //var url = '/api/v' + self.apiVersion + '/timeseries';\n        //fq=time:[2018-01-24T02:59:10.000Z TO 2018-01-24T14:59:10.000Z]\n        var url = '/solr/' + target.collection + '/select?wt=json';\n        //var rows = queryOptions.maxDataPoints || '100000';\n        var rows = target.rows;\n        var q = self.templateSrv.replace(target.target, queryOptions.scopedVars);\n        q = self.queryBuilder(q);\n        var rawParams = target.rawParams ? target.rawParams.split('&') : [];\n        var query = {\n          //query: templateSrv.replace(target.target, queryOptions.scopedVars),\n          fq: target.time + ':[' + queryOptions.range.from.toJSON() + ' TO ' + queryOptions.range.to.toJSON() + ']',\n          q: q,\n          fl: target.time + ',' + target.fields,\n          rows: rows,\n          sort: target.time + ' desc',\n          start: target.start\n          //from: queryOptions.range.from.toJSON(),\n          //to: queryOptions.range.to.toJSON(),\n        };\n\n        rawParams.map(p => {\n          var tuple = p.split('=');\n          var val = tuple[1].replace('__START_TIME__', queryOptions.range.from.toJSON()).replace('__END_TIME__', queryOptions.range.to.toJSON());\n          query[tuple[0]] = val;\n        });\n        if (target.groupEnabled === 'group') {\n          query.group = true;\n          query['group.field'] = target.groupByField;\n          self.groupByField = target.groupByField;\n          query['group.limit'] = target.groupLimit;\n        }\n\n        self.time = target.time;\n\n        var requestOptions;\n\n        requestOptions = {\n          method: 'GET',\n          url: url,\n          params: query\n        };\n\n        \n        return self._request(requestOptions).then(_.bind(self.convertResponse, self, _, target.outputFormat));\n      })\n      .value();\n\n    return this.$q.all(targetPromises).then(function (convertedResponses) {\n      var result = {\n        data: _.map(convertedResponses, function (convertedResponse) {\n          return convertedResponse.data;\n        })\n      };\n      result.data = _.flatten(result.data);\n      //console.log('RESULT: ' + JSON.stringify(result));\n      return result;\n    });\n  }\n\n  queryBuilder(query) {\n    return query.replace(/{/g, '(').replace(/}/g, ')').replace(/,/g, ' OR ');\n  }\n\n  getOptions(query) {\n    return [];\n  }\n\n  listCollections(query) {\n    // solr/admin/collections?action=LIST&wt=json\n    if (!this.solrCloudMode) {\n      return [];\n    }\n    var url = this.url + '/solr/admin/collections?action=LIST&wt=json';\n    var requestOptions;\n\n    requestOptions = {\n      method: 'GET',\n      url: url\n    };\n\n    return this.doRequest(requestOptions).then(this.mapToTextValue);\n  }\n\n  listFields(query, collection) {\n    // solr/admin/collections?action=LIST&wt=json\n    if (!collection) {\n      return [];\n    }\n    var url = this.url + '/solr/' + collection + '/select?q=*:*&wt=csv&rows=1';\n    var requestOptions;\n\n    requestOptions = {\n      method: 'GET',\n      url: url\n    };\n\n    return this.doRequest(requestOptions).then(this.mapToTextValue);\n  }\n\n  listRawParams() {\n    return [\n      {\n        text: 'HeatMap Facet Query',\n        value: 'facet=true&json.facet={\"heatMapFacet\":{\"numBuckets\":true,\"offset\":0,\"limit\":10000,\"type\":\"terms\",\"field\":\"jobId\",\"facet\":{\"Day0\":{\"type\":\"range\",\"field\":\"timestamp\",\"start\":\"__START_TIME__\",\"end\":\"__END_TIME__\",\"gap\":\"+1HOUR\",\"facet\":{\"score\":{\"type\":\"query\",\"q\":\"*:*\",\"facet\":{\"score\":\"max(score_value)\"}}}}}}}'\n      }, {\n        text: 'Get Raw Messages',\n        value: 'getRawMessages=true'\n      }\n    ];\n  }\n\n  listOutputFormats() {\n    return [\n      {\n        text: 'Table',\n        value: 'table'\n      }, {\n        text: 'Chart',\n        value: 'chart'\n      }\n    ];\n  }\n\n  metricFindQuery(query) {\n    //q=*:*&facet=true&facet.field=CR&facet.field=product_type&facet.field=provincia&wt=json&rows=0\n    if (!this.solrCollection) {\n      return [];\n    }\n    var facetFields = query;\n    var url = this.url + '/solr/' + this.solrCollection + '/select?q=*:*&facet=true&facet.field=' + facetFields + '&wt=json&rows=0';\n\n    return this.doRequest({\n      url: url,\n      method: 'GET',\n    }).then(this.mapToTextValue);\n  }\n\n  mapToTextValue(result) {\n    if (result.data.collections) {\n      return result.data.collections.map(function (collection) {\n        return {\n          text: collection,\n          value: collection\n        };\n      });\n    }\n    if (result.data.facet_counts) {\n      var ar = [];\n      for (var key in result.data.facet_counts.facet_fields) {\n        if (result.data.facet_counts.facet_fields.hasOwnProperty(key)) {\n          var array = result.data.facet_counts.facet_fields[key];\n          for (var i = 0; i < array.length; i += 2) { // take every second element\n            ar.push({\n              text: array[i],\n              expandable: false\n            });\n          }\n        }\n      }\n      return ar;\n    }\n    if (result.data) {\n      return result.data.split('\\n')[0].split(',').map(function (field) {\n        return {\n          text: field,\n          value: field\n        };\n      });\n    }\n  }\n\n  convertResponseUngrouped(response, format) {\n    var data = response.data;\n    var seriesList;\n    var series = {};\n    var self = this;\n\n    // Process heatmap facet response\n    if (data.facets && data.facets.heatMapFacet) {\n      seriesList = [];\n      var jobs = data.facets.heatMapFacet.buckets;\n      _(jobs).forEach(job => {\n        var dayBuckets = job.Day0.buckets;\n        var seriesData = [];\n        _(dayBuckets).forEach(bucket => {\n          if (bucket.score && bucket.score.score) {\n            seriesData.push([bucket.score.score, moment.utc(bucket.val).valueOf()]);\n          }\n        });\n        seriesList.push({\n          target: job.val,\n          datapoints: seriesData\n        });\n      });\n    } else if (format === 'table') { // Table\n      var columns = [];\n      var rows = [];\n      seriesList = {};\n      var index = 0;\n      _(data.response.docs).forEach(function (item) {\n        var row = [];\n        for (var property in item) {\n          // Set columns\n          if (index == 0 && item.hasOwnProperty(property)) {\n            if (property == self.time) {\n              columns.push({type: \"time\", text: 'Time'});\n            } else {\n              columns.push({type: \"string\", text: property});\n            }\n          }\n          // Set rows\n          if (property === self.time) {\n            var ts = moment.utc(item[self.time]).valueOf(); //.unix() * 1000;\n            row.push(ts);\n          }\n          else {\n            row.push(item[property]);\n          }\n          \n        }\n        index++;\n        rows.push(row);\n      });\n      seriesList = {\n        type: \"table\",\n        columns: columns,\n        rows: rows\n      };\n    } else { // Charts\n      seriesList = [];\n     _(data.response.docs).forEach(function (item) {\n       for (var property in item) {\n         if (item.hasOwnProperty(property) && property != self.time) {\n           // do stuff\n           if (typeof (series[property]) === 'undefined') {\n             series[property] = [];\n           }\n           var ts = moment.utc(item[self.time]).valueOf(); //.unix() * 1000;\n           series[property].push([item[property] || 0, ts]);\n         }\n       }\n     });\n     for (var property in series) {\n       seriesList.push({\n         target: property,\n         datapoints: series[property].reverse()\n       });\n     }\n   }\n    \n    return {\n      data: seriesList\n    };\n  }\n\n  /*convertResponseGrouped(response) {\n    var data = response.data;\n    var groupBy = data.responseHeader.params['group.field'];\n    var seriesList = [];\n    // Recover the timestamp variable used for filtering\n    var time = response.data.responseHeader.params.fl.split(',')[0];\n    var seriesData = [];\n    _(data.grouped[groupBy].groups).forEach(function (item) {\n      var target = item.groupValue || 'N/A';\n      var datapoints = [];\n      for (var i = 0; i < item.doclist.docs.length; i++) {\n        for (var property in item.doclist.docs[i]) {\n          if (item.doclist.docs[i].hasOwnProperty(property) && property != time) {\n            var t = moment.utc(item.doclist.docs[i][time]).unix() * 1000;\n            datapoints.push([item.doclist.docs[i][property], t]);\n          }\n        }\n      }\n      seriesList.push({\n        target: target,\n        datapoints: datapoints.reverse()\n      });\n    });\n    return {\n      data: seriesList\n    };\n  }*/\n\n  convertResponseGrouped(response) {\n    var data = response.data;\n    var groupBy = data.responseHeader.params['group.field'];\n    var seriesList = [];\n    // Recover the timestamp variable used for filtering\n    var time = response.data.responseHeader.params.fl.split(',')[0];\n    var datapoints = {};\n    _(data.grouped[groupBy].groups).forEach(function (item) {\n      // var target = item.groupValue || 'N/A';\n      for (var i = 0; i < item.doclist.docs.length; i++) {\n        for (var property in item.doclist.docs[i]) {\n          if (item.doclist.docs[i].hasOwnProperty(property) && property != time) {\n            var t = moment.utc(item.doclist.docs[i][time]).unix() * 1000;\n            var key = item.groupValue + ':' + property;\n            if (datapoints[key] == undefined) {\n              datapoints[key] = [];\n            }\n            datapoints[key].push([item.doclist.docs[i][property], t]);\n          }\n        }\n      }\n      /*seriesList.push({\n        target: target,\n        datapoints: datapoints.reverse()\n      });*/\n      seriesList = [];\n      for (var prop in datapoints) {\n        seriesList.push({\n          target: prop,\n          datapoints: datapoints[prop].reverse()\n        });\n      }\n    });\n    return {\n      data: seriesList\n    };\n  }\n\n  convertResponse(response, format) {\n\n    var data = response.data;\n\n    if (!data) {\n      return [];\n    }\n\n    if (data.response) {\n      return this.convertResponseUngrouped(response, format);\n    }\n\n    if (data.grouped) {\n      return this.convertResponseGrouped(response);\n    }\n\n    return [];\n  }\n\n  annotationQuery(options) {\n    const annotation = options.annotation;\n    const baseQuery = this.templateSrv.replace(annotation.query, {}, \"glob\") || \"*:*\";\n    const timeField = annotation.timeField || \"timestamp_dt\";\n    const collection = annotation.collection || \"annotations\";\n    const tagsField = annotation.tagsField || \"tags\";\n    const titleField = annotation.titleField || \"desc\";\n    const textField = annotation.textField || null;\n    const start = options.range.from.toISOString();\n    const end = options.range.to.toISOString();\n    const query = {\n      q: `${baseQuery} AND ${timeField}:[${start} TO ${end}]`,\n      limit: 10\n    };\n\n    var url = this.url + '/solr/' + collection + '/select?wt=json&defType=edismax';\n\n    var requestOptions;\n\n    requestOptions = {\n      method: 'GET',\n      url: url,\n      params: query\n    };\n\n    return this.doRequest(requestOptions).then((result) => {\n      return _.map(result.data.response.docs, (doc) => {\n        return {\n          annotation: annotation,\n          time: moment(doc[timeField]).valueOf(),\n          title: doc[titleField],\n          tags: doc[tagsField],\n          text: doc[textField]\n        };\n      });\n    });\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n    if (this.basicAuth) {\n      options.withCredentials = true;\n      options.headers = {\n        \"Authorization\": this.basicAuth\n      };\n    }\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n}"]}